{"ast":null,"code":"import { z } from 'zod';\nexport const tankInputSchema = z.object({\n  chemical: z.enum([\"aniline\", \"acetic_anhydride\", \"unreacted_aniline\", \"unreacted_acetic_anhydride\", \"acetanilide\", \"acetic_acid\"]),\n  Vd: z.number().min(0.1, \"Daily volume must be at least 0.1 m³/day\").max(1000, \"Daily volume cannot exceed 1000 m³/day\"),\n  N: z.number().min(1, \"Storage days must be at least 1 day\").max(365, \"Storage days cannot exceed 365 days\"),\n  n: z.number().min(1, \"Number of tanks must be at least 1\").max(100, \"Number of tanks cannot exceed 100\"),\n  geometryMode: z.enum([\"H=1.5D\", \"manual\"]),\n  D: z.number().optional(),\n  H: z.number().optional(),\n  safetyHeight: z.boolean(),\n  rho: z.number().min(100, \"Density must be at least 100 kg/m³\").max(2000, \"Density cannot exceed 2000 kg/m³\"),\n  S: z.number().min(1e6, \"Allowable stress must be at least 1 MPa\").max(1000e6, \"Allowable stress cannot exceed 1000 MPa\"),\n  E: z.number().min(0.1, \"Weld efficiency must be at least 0.1\").max(1.0, \"Weld efficiency cannot exceed 1.0\"),\n  material: z.enum([\"SS\", \"HDPE\"]),\n  atm: z.number().min(80000, \"Atmospheric pressure must be at least 80 kPa\").max(120000, \"Atmospheric pressure cannot exceed 120 kPa\"),\n  g: z.number().min(9.0, \"Gravity must be at least 9.0 m/s²\").max(10.0, \"Gravity cannot exceed 10.0 m/s²\"),\n  corrosion: z.number().min(0, \"Corrosion allowance cannot be negative\").max(50, \"Corrosion allowance cannot exceed 50 mm\")\n}).refine(data => {\n  // Custom validation for manual geometry mode\n  if (data.geometryMode === \"manual\") {\n    if (!data.D || !data.H) {\n      return false;\n    }\n    if (data.D <= 0 || data.H <= 0) {\n      return false;\n    }\n    const aspectRatio = data.H / data.D;\n    if (aspectRatio < 0.5 || aspectRatio > 3) {\n      return false;\n    }\n  }\n  return true;\n}, {\n  message: \"Manual dimensions must be provided and H/D ratio must be between 0.5 and 3\",\n  path: [\"geometryMode\"]\n});\n// Helper function to get validation errors\nexport function getValidationErrors(data) {\n  try {\n    tankInputSchema.parse(data);\n    return [];\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return error.errors.map(err => `${err.path.join('.')}: ${err.message}`);\n    }\n    return [\"Validation error occurred\"];\n  }\n}\n\n// Helper function to validate specific field\nexport function validateField(field, value) {\n  try {\n    const partialSchema = z.object({\n      [field]: tankInputSchema.shape[field]\n    });\n    partialSchema.parse({\n      [field]: value\n    });\n    return null;\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      var _error$errors$;\n      return ((_error$errors$ = error.errors[0]) === null || _error$errors$ === void 0 ? void 0 : _error$errors$.message) || null;\n    }\n    return \"Invalid value\";\n  }\n}","map":{"version":3,"names":["z","tankInputSchema","object","chemical","enum","Vd","number","min","max","N","n","geometryMode","D","optional","H","safetyHeight","boolean","rho","S","E","material","atm","g","corrosion","refine","data","aspectRatio","message","path","getValidationErrors","parse","error","ZodError","errors","map","err","join","validateField","field","value","partialSchema","shape","_error$errors$"],"sources":["C:/Users/sonaw/chemical-plant-design/src/utils/validation.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const tankInputSchema = z.object({\n  chemical: z.enum([\n    \"aniline\",\n    \"acetic_anhydride\", \n    \"unreacted_aniline\",\n    \"unreacted_acetic_anhydride\",\n    \"acetanilide\",\n    \"acetic_acid\"\n  ]),\n  Vd: z.number()\n    .min(0.1, \"Daily volume must be at least 0.1 m³/day\")\n    .max(1000, \"Daily volume cannot exceed 1000 m³/day\"),\n  N: z.number()\n    .min(1, \"Storage days must be at least 1 day\")\n    .max(365, \"Storage days cannot exceed 365 days\"),\n  n: z.number()\n    .min(1, \"Number of tanks must be at least 1\")\n    .max(100, \"Number of tanks cannot exceed 100\"),\n  geometryMode: z.enum([\"H=1.5D\", \"manual\"]),\n  D: z.number().optional(),\n  H: z.number().optional(),\n  safetyHeight: z.boolean(),\n  rho: z.number()\n    .min(100, \"Density must be at least 100 kg/m³\")\n    .max(2000, \"Density cannot exceed 2000 kg/m³\"),\n  S: z.number()\n    .min(1e6, \"Allowable stress must be at least 1 MPa\")\n    .max(1000e6, \"Allowable stress cannot exceed 1000 MPa\"),\n  E: z.number()\n    .min(0.1, \"Weld efficiency must be at least 0.1\")\n    .max(1.0, \"Weld efficiency cannot exceed 1.0\"),\n  material: z.enum([\"SS\", \"HDPE\"]),\n  atm: z.number()\n    .min(80000, \"Atmospheric pressure must be at least 80 kPa\")\n    .max(120000, \"Atmospheric pressure cannot exceed 120 kPa\"),\n  g: z.number()\n    .min(9.0, \"Gravity must be at least 9.0 m/s²\")\n    .max(10.0, \"Gravity cannot exceed 10.0 m/s²\"),\n  corrosion: z.number()\n    .min(0, \"Corrosion allowance cannot be negative\")\n    .max(50, \"Corrosion allowance cannot exceed 50 mm\")\n}).refine((data) => {\n  // Custom validation for manual geometry mode\n  if (data.geometryMode === \"manual\") {\n    if (!data.D || !data.H) {\n      return false;\n    }\n    if (data.D <= 0 || data.H <= 0) {\n      return false;\n    }\n    const aspectRatio = data.H / data.D;\n    if (aspectRatio < 0.5 || aspectRatio > 3) {\n      return false;\n    }\n  }\n  return true;\n}, {\n  message: \"Manual dimensions must be provided and H/D ratio must be between 0.5 and 3\",\n  path: [\"geometryMode\"]\n});\n\nexport type TankInputSchema = z.infer<typeof tankInputSchema>;\n\n// Helper function to get validation errors\nexport function getValidationErrors(data: any): string[] {\n  try {\n    tankInputSchema.parse(data);\n    return [];\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return error.errors.map(err => `${err.path.join('.')}: ${err.message}`);\n    }\n    return [\"Validation error occurred\"];\n  }\n}\n\n// Helper function to validate specific field\nexport function validateField(field: keyof TankInputSchema, value: any): string | null {\n  try {\n    const partialSchema = z.object({ [field]: tankInputSchema.shape[field as keyof typeof tankInputSchema.shape] });\n    partialSchema.parse({ [field]: value });\n    return null;\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return error.errors[0]?.message || null;\n    }\n    return \"Invalid value\";\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}