{"ast":null,"code":"import{z}from'zod';export const tankInputSchema=z.object({chemical:z.enum([\"aniline\",\"acetic_anhydride\",\"unreacted_aniline\",\"unreacted_acetic_anhydride\",\"acetanilide\",\"acetic_acid\"]),Vd:z.number().min(0.1,\"Daily volume must be at least 0.1 m³/day\").max(1000,\"Daily volume cannot exceed 1000 m³/day\"),N:z.number().min(1,\"Storage days must be at least 1 day\").max(365,\"Storage days cannot exceed 365 days\"),n:z.number().min(1,\"Number of tanks must be at least 1\").max(100,\"Number of tanks cannot exceed 100\"),geometryMode:z.enum([\"H=1.5D\",\"manual\"]),D:z.number().optional(),H:z.number().optional(),safetyHeight:z.boolean(),rho:z.number().min(100,\"Density must be at least 100 kg/m³\").max(2000,\"Density cannot exceed 2000 kg/m³\"),S:z.number().min(1e6,\"Allowable stress must be at least 1 MPa\").max(1000e6,\"Allowable stress cannot exceed 1000 MPa\"),E:z.number().min(0.1,\"Weld efficiency must be at least 0.1\").max(1.0,\"Weld efficiency cannot exceed 1.0\"),material:z.enum([\"SS\",\"HDPE\"]),atm:z.number().min(80000,\"Atmospheric pressure must be at least 80 kPa\").max(120000,\"Atmospheric pressure cannot exceed 120 kPa\"),g:z.number().min(9.0,\"Gravity must be at least 9.0 m/s²\").max(10.0,\"Gravity cannot exceed 10.0 m/s²\"),corrosion:z.number().min(0,\"Corrosion allowance cannot be negative\").max(50,\"Corrosion allowance cannot exceed 50 mm\")}).refine(data=>{// Custom validation for manual geometry mode\nif(data.geometryMode===\"manual\"){if(!data.D||!data.H){return false;}if(data.D<=0||data.H<=0){return false;}const aspectRatio=data.H/data.D;if(aspectRatio<0.5||aspectRatio>3){return false;}}return true;},{message:\"Manual dimensions must be provided and H/D ratio must be between 0.5 and 3\",path:[\"geometryMode\"]});// Helper function to get validation errors\nexport function getValidationErrors(data){try{tankInputSchema.parse(data);return[];}catch(error){if(error instanceof z.ZodError){return error.errors.map(err=>\"\".concat(err.path.join('.'),\": \").concat(err.message));}return[\"Validation error occurred\"];}}// Helper function to validate specific field\nexport function validateField(field,value){try{// Create a partial schema for the specific field\nconst fieldSchema=z.object({[field]:z.any()});fieldSchema.parse({[field]:value});return null;}catch(error){if(error instanceof z.ZodError){var _error$errors$;return((_error$errors$=error.errors[0])===null||_error$errors$===void 0?void 0:_error$errors$.message)||null;}return\"Invalid value\";}}","map":{"version":3,"names":["z","tankInputSchema","object","chemical","enum","Vd","number","min","max","N","n","geometryMode","D","optional","H","safetyHeight","boolean","rho","S","E","material","atm","g","corrosion","refine","data","aspectRatio","message","path","getValidationErrors","parse","error","ZodError","errors","map","err","concat","join","validateField","field","value","fieldSchema","any","_error$errors$"],"sources":["C:/Users/sonaw/chemical-plant-design/src/utils/validation.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const tankInputSchema = z.object({\n  chemical: z.enum([\n    \"aniline\",\n    \"acetic_anhydride\", \n    \"unreacted_aniline\",\n    \"unreacted_acetic_anhydride\",\n    \"acetanilide\",\n    \"acetic_acid\"\n  ]),\n  Vd: z.number()\n    .min(0.1, \"Daily volume must be at least 0.1 m³/day\")\n    .max(1000, \"Daily volume cannot exceed 1000 m³/day\"),\n  N: z.number()\n    .min(1, \"Storage days must be at least 1 day\")\n    .max(365, \"Storage days cannot exceed 365 days\"),\n  n: z.number()\n    .min(1, \"Number of tanks must be at least 1\")\n    .max(100, \"Number of tanks cannot exceed 100\"),\n  geometryMode: z.enum([\"H=1.5D\", \"manual\"]),\n  D: z.number().optional(),\n  H: z.number().optional(),\n  safetyHeight: z.boolean(),\n  rho: z.number()\n    .min(100, \"Density must be at least 100 kg/m³\")\n    .max(2000, \"Density cannot exceed 2000 kg/m³\"),\n  S: z.number()\n    .min(1e6, \"Allowable stress must be at least 1 MPa\")\n    .max(1000e6, \"Allowable stress cannot exceed 1000 MPa\"),\n  E: z.number()\n    .min(0.1, \"Weld efficiency must be at least 0.1\")\n    .max(1.0, \"Weld efficiency cannot exceed 1.0\"),\n  material: z.enum([\"SS\", \"HDPE\"]),\n  atm: z.number()\n    .min(80000, \"Atmospheric pressure must be at least 80 kPa\")\n    .max(120000, \"Atmospheric pressure cannot exceed 120 kPa\"),\n  g: z.number()\n    .min(9.0, \"Gravity must be at least 9.0 m/s²\")\n    .max(10.0, \"Gravity cannot exceed 10.0 m/s²\"),\n  corrosion: z.number()\n    .min(0, \"Corrosion allowance cannot be negative\")\n    .max(50, \"Corrosion allowance cannot exceed 50 mm\")\n}).refine((data) => {\n  // Custom validation for manual geometry mode\n  if (data.geometryMode === \"manual\") {\n    if (!data.D || !data.H) {\n      return false;\n    }\n    if (data.D <= 0 || data.H <= 0) {\n      return false;\n    }\n    const aspectRatio = data.H / data.D;\n    if (aspectRatio < 0.5 || aspectRatio > 3) {\n      return false;\n    }\n  }\n  return true;\n}, {\n  message: \"Manual dimensions must be provided and H/D ratio must be between 0.5 and 3\",\n  path: [\"geometryMode\"]\n});\n\nexport type TankInputSchema = z.infer<typeof tankInputSchema>;\n\n// Helper function to get validation errors\nexport function getValidationErrors(data: any): string[] {\n  try {\n    tankInputSchema.parse(data);\n    return [];\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return error.errors.map(err => `${err.path.join('.')}: ${err.message}`);\n    }\n    return [\"Validation error occurred\"];\n  }\n}\n\n// Helper function to validate specific field\nexport function validateField(field: keyof TankInputSchema, value: any): string | null {\n  try {\n    // Create a partial schema for the specific field\n    const fieldSchema = z.object({ [field]: z.any() });\n    fieldSchema.parse({ [field]: value });\n    return null;\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return error.errors[0]?.message || null;\n    }\n    return \"Invalid value\";\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}